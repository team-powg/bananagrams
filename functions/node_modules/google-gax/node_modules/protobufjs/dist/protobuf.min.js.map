{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/common.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light.js","../src/index-minimal.js","../src/index","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/parse.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/tokenize.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["global","undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","define","amd","Long","isLong","util","configure","module","1","require","asPromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","decode","c","charCodeAt","Error","test","codegen","functionParams","functionName","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","floor","JSON","stringify","body","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","writeFloat_f32_cpy","val","buf","pos","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDouble_f64_cpy","f64","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","common","json","commonRe","nested","google","Any","fields","type_url","type","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","get","file","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","Enum","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fieldsArray","safeProp","map","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","hasKs2","_fieldsArray","indexOf","missing","decoder","filter","group","ref","types","long","basic","packed","rfield","required","genTypePartial","encoder","wireType","mapKey","optional","ReflectionObject","TypeError","valuesById","create","comments","reserved","constructor","className","Namespace","fromJSON","enm","toJSON","add","comment","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","Field","extend","isObject","ruleRe","toLowerCase","message","defaultValue","bytes","extensionField","declaringField","_packed","Type","defineProperty","getOption","setOption","ifNotSet","resolved","defaults","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","load","root","Root","loadSync","build","verifier","OneOf","MapField","Service","Method","Message","wrappers","Reader","BufferReader","Writer","BufferWriter","rpc","roots","tokenize","parse","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","toJSONOptions","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","prev","setOptions","onAdd","onRemove","isArray","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","defineProperties","unshift","_handleAdd","_handleRemove","Root_","fieldNames","addFieldsToParent","self","oneofName","oneOfGetter","set","oneOfSetter","illegal","token","insideTryCatch","tn","line","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRanges","target","acceptStrings","parseId","substring","base10Re","parseInt","base16Re","base8Re","numberRe","parseFloat","acceptNegative","base10NegRe","base16NegRe","base8NegRe","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","ifBlock","fnIf","fnElse","trailingLine","cmnt","nameRe","parseMapField","parseField","parseOneOf","extensions","isProto3","parseGroup","applyCase","parseInlineOptions","lcFirst","ucFirst","valueType","parseEnumValue","dummy","isCustom","fqTypeRefRe","parseOptionValue","service","parseMethod","method","reference","pkg","imports","weakImports","syntax","head","keepCase","camelCase","whichImports","package","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","LongBits","readFixed32_end","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skipType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","resolvePath","finish","cb","sync","process","parsed","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","methodName","isReserved","m","q","s","unescape","str","unescapeRe","unescapeMap","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","setComment","commentType","commentLine","commentLineEmpty","lines","setCommentSplitRe","setCommentRe","trim","commentText","stack","repeat","curr","isDoc","whitespaceRe","delimRe","expected","actual","ret","0","r","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","setup","wrapper","originalThis","fork","ldelim","typeName","bake","o","key","safePropBackslashRe","safePropQuoteRe","toUpperCase","camelCaseRe","a","decorateRoot","enumerable","decorateEnumIndex","zero","toNumber","zzEncode","zeroHash","from","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","newError","CustomError","captureStackTrace","versions","node","Number","isFinite","isset","isSet","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","invalid","genVerifyValue","genVerifyKey","seenFirstField","oneofProp","substr","Op","noop","State","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a unified `global` and a minification-friendly `undefined` var plus a global\r\n    // \"use strict\" directive so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    // Expose globally\r\n    var protobuf = global.protobuf = $require(entries[0]);\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            if (Long && Long.isLong) {\r\n                protobuf.util.Long = Long;\r\n                protobuf.configure();\r\n            }\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {INamespace} google/protobuf/any.proto Any\r\n * @property {INamespace} google/protobuf/duration.proto Duration\r\n * @property {INamespace} google/protobuf/empty.proto Empty\r\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\r\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/field_mask.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Any message.\r\n     * @interface IAny\r\n     * @type {Object}\r\n     * @property {string} [typeUrl]\r\n     * @property {Uint8Array} [bytes]\r\n     * @memberof common\r\n     */\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Duration message.\r\n     * @interface IDuration\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Timestamp message.\r\n     * @interface ITimestamp\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Empty message.\r\n     * @interface IEmpty\r\n     * @memberof common\r\n     */\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Struct message.\r\n     * @interface IStruct\r\n     * @type {Object}\r\n     * @property {Object.<string,IValue>} [fields]\r\n     * @memberof common\r\n     */\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Value message.\r\n     * @interface IValue\r\n     * @type {Object}\r\n     * @property {string} [kind]\r\n     * @property {0} [nullValue]\r\n     * @property {number} [numberValue]\r\n     * @property {string} [stringValue]\r\n     * @property {boolean} [boolValue]\r\n     * @property {IStruct} [structValue]\r\n     * @property {IListValue} [listValue]\r\n     * @memberof common\r\n     */\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.ListValue message.\r\n     * @interface IListValue\r\n     * @type {Object}\r\n     * @property {Array.<IValue>} [values]\r\n     * @memberof common\r\n     */\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.DoubleValue message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FloatValue message.\r\n     * @interface IFloatValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int64Value message.\r\n     * @interface IInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt64Value message.\r\n     * @interface IUInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int32Value message.\r\n     * @interface IInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt32Value message.\r\n     * @interface IUInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BoolValue message.\r\n     * @interface IBoolValue\r\n     * @type {Object}\r\n     * @property {boolean} [value]\r\n     * @memberof common\r\n     */\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.StringValue message.\r\n     * @interface IStringValue\r\n     * @type {Object}\r\n     * @property {string} [value]\r\n     * @memberof common\r\n     */\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BytesValue message.\r\n     * @interface IBytesValue\r\n     * @type {Object}\r\n     * @property {Uint8Array} [value]\r\n     * @memberof common\r\n     */\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Gets the root definition of the specified common proto file.\r\n *\r\n * Bundled definitions are:\r\n * - google/protobuf/any.proto\r\n * - google/protobuf/duration.proto\r\n * - google/protobuf/empty.proto\r\n * - google/protobuf/struct.proto\r\n * - google/protobuf/timestamp.proto\r\n * - google/protobuf/wrappers.proto\r\n *\r\n * @param {string} file Proto file name\r\n * @returns {INamespace|null} Root definition or `null` if not defined\r\n */\r\ncommon.get = function get(file) {\r\n    return common[file] || null;\r\n};\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(37);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %i:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(36),\r\n    util    = require(37);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(36),\r\n    util     = require(37);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(23),\r\n    util = require(37);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Enum(name, values, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = {};\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    var enm = new Enum(name, json.values, json.options);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(15),\r\n    types = require(36),\r\n    util  = require(37);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Field(name, id, type, rule, extend, options) {\r\n\r\n    if (util.isObject(rule)) {\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(40);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(24);\r\nprotobuf.Namespace        = require(23);\r\nprotobuf.Root             = require(29);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(35);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(25);\r\nprotobuf.MapField         = require(20);\r\nprotobuf.Service          = require(33);\r\nprotobuf.Method           = require(22);\r\n\r\n// Runtime\r\nprotobuf.Message          = require(21);\r\nprotobuf.wrappers         = require(41);\r\n\r\n// Utility\r\nprotobuf.types            = require(36);\r\nprotobuf.util             = require(37);\r\n\r\n// Configure reflection\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(42);\r\nprotobuf.BufferWriter = require(43);\r\nprotobuf.Reader       = require(27);\r\nprotobuf.BufferReader = require(28);\r\n\r\n// Utility\r\nprotobuf.util         = require(39);\r\nprotobuf.rpc          = require(31);\r\nprotobuf.roots        = require(30);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Configure serialization\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(34);\r\nprotobuf.parse            = require(26);\r\nprotobuf.common           = require(11);\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(36),\r\n    util    = require(37);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction MapField(name, id, keyType, type, options) {\r\n    Field.call(this, name, id, type, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedResponseType = null;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Enum     = require(15),\r\n    Field    = require(16),\r\n    util     = require(37);\r\n\r\nvar Type,    // cyclic\r\n    Service; // \"\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON();\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedId = function isReservedId(reserved, id) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedName = function isReservedName(reserved, name) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {ReflectionObject[]|null}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum\");\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type\");\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\nNamespace._configure = function(Type_, Service_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(37);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(16),\r\n    util  = require(37);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction OneOf(name, fieldNames, options) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON() {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = new Array(arguments.length),\r\n        index = 0;\r\n    while (index < arguments.length)\r\n        fieldNames[index] = arguments[index++];\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(34),\r\n    Root      = require(29),\r\n    Type      = require(35),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    OneOf     = require(25),\r\n    Enum      = require(15),\r\n    Service   = require(33),\r\n    Method    = require(22),\r\n    types     = require(36),\r\n    util      = require(37);\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/;\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            /* istanbul ignore if */\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": case \"Inf\":\r\n                return sign * Infinity;\r\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\r\n                return NaN;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n\r\n        /* istanbul ignore else */\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": case \"Max\":\r\n                return 536870911;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!acceptNegative && token.charAt(0) === \"-\")\r\n            throw illegal(token, \"id\");\r\n\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n\r\n        /* istanbul ignore if */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n\r\n        pkg = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n\r\n        /* istanbul ignore if */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ifBlock(obj, fnIf, fnElse) {\r\n        var trailingLine = tn.line;\r\n        if (obj) {\r\n            obj.comment = cmnt(); // try block-type comment\r\n            obj.filename = parse.filename;\r\n        }\r\n        if (skip(\"{\", true)) {\r\n            var token;\r\n            while ((token = next()) !== \"}\")\r\n                fnIf(token);\r\n            skip(\";\", true);\r\n        } else {\r\n            if (fnElse)\r\n                fnElse();\r\n            skip(\";\");\r\n            if (obj && typeof obj.comment !== \"string\")\r\n                obj.comment = cmnt(trailingLine); // try line-type comment if no block\r\n        }\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"type name\");\r\n\r\n        var type = new Type(token);\r\n        ifBlock(type, function parseType_block(token) {\r\n            if (parseCommon(type, token))\r\n                return;\r\n\r\n            switch (token) {\r\n\r\n                case \"map\":\r\n                    parseMapField(type, token);\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"oneof\":\r\n                    parseOneOf(type, token);\r\n                    break;\r\n\r\n                case \"extensions\":\r\n                    readRanges(type.extensions || (type.extensions = []));\r\n                    break;\r\n\r\n                case \"reserved\":\r\n                    readRanges(type.reserved || (type.reserved = []), true);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n\r\n                    push(token);\r\n                    parseField(type, \"optional\");\r\n                    break;\r\n            }\r\n        });\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n\r\n        var field = new Field(name, parseId(next()), type, rule, extend);\r\n        ifBlock(field, function parseField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // all known packable types and anything that could be an enum (= is not a basic type).\r\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        field.filename = parse.filename;\r\n        ifBlock(type, function parseGroup_block(token) {\r\n            switch (token) {\r\n\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        });\r\n        parent.add(type)\r\n              .add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n\r\n        skip(\",\");\r\n        var valueType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n\r\n        skip(\">\");\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        skip(\"=\");\r\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\r\n        ifBlock(field, function parseMapField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseMapField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var oneof = new OneOf(applyCase(token));\r\n        ifBlock(oneof, function parseOneOf_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(oneof, token);\r\n                skip(\";\");\r\n            } else {\r\n                push(token);\r\n                parseField(oneof, \"optional\");\r\n            }\r\n        });\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var enm = new Enum(token);\r\n        ifBlock(enm, function parseEnum_block(token) {\r\n          switch(token) {\r\n            case \"option\":\r\n              parseOption(enm, token);\r\n              skip(\";\");\r\n              break;\r\n\r\n            case \"reserved\":\r\n              readRanges(enm.reserved || (enm.reserved = []), true);\r\n              break;\r\n\r\n            default:\r\n              parseEnumValue(enm, token);\r\n          }\r\n        });\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            dummy = {};\r\n        ifBlock(dummy, function parseEnumValue_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(dummy, token); // skip\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseEnumValue_line() {\r\n            parseInlineOptions(dummy); // skip\r\n        });\r\n        parent.add(token, value, dummy.comment);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var isCustom = skip(\"(\", true);\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        if (isCustom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            do {\r\n                /* istanbul ignore if */\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    if (peek() === \"{\")\r\n                        parseOptionValue(parent, name + \".\" + token);\r\n                    else\r\n                        setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var service = new Service(token);\r\n        ifBlock(service, function parseService_block(token) {\r\n            if (parseCommon(service, token))\r\n                return;\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"rpc\")\r\n                parseMethod(service, token);\r\n            else\r\n                throw illegal(token);\r\n        });\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token,\r\n            requestType, requestStream,\r\n            responseType, responseStream;\r\n\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        ifBlock(method, function parseMethod_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(method, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        });\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"reference\");\r\n\r\n        var reference = token;\r\n        ifBlock(null, function parseExtension_block(token) {\r\n            switch (token) {\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                case \"optional\":\r\n                    parseField(parent, token, reference);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n                    push(token);\r\n                    parseField(parent, \"optional\", reference);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(39);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(27);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(16),\r\n    Enum    = require(15),\r\n    OneOf   = require(25),\r\n    util    = require(37);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type = Type_;\r\n    parse = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(32);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(39);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(22),\r\n    util   = require(37),\r\n    rpc    = require(31);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {Method[]|null}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\r\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @memberof tokenize\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Gets the next token and advances.\r\n * @typedef TokenizerHandleNext\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Peeks for the next token.\r\n * @typedef TokenizerHandlePeek\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Pushes a token back to the stack.\r\n * @typedef TokenizerHandlePush\r\n * @type {function}\r\n * @param {string} token Token\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Skips the next token.\r\n * @typedef TokenizerHandleSkip\r\n * @type {function}\r\n * @param {string} expected Expected token\r\n * @param {boolean} [optional=false] If optional\r\n * @returns {boolean} Whether the token matched\r\n * @throws {Error} If the token didn't match and is not optional\r\n */\r\n\r\n/**\r\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\r\n * @typedef TokenizerHandleCmnt\r\n * @type {function}\r\n * @param {number} [line] Line number\r\n * @returns {string|null} Comment text or `null` if none\r\n */\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @interface ITokenizerHandle\r\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\r\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\r\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\r\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n * @property {number} line Current line number\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @returns {ITokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0,\r\n        commentLineEmpty = false;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        commentLineEmpty = false;\r\n        var offset = start - 3, // \"///\" or \"/**\"\r\n            c;\r\n        do {\r\n            if (--offset < 0 || (c = source.charAt(offset)) === \"\\n\") {\r\n                commentLineEmpty = true;\r\n                break;\r\n            }\r\n        } while (c === \" \" || c === \"\\t\");\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i].replace(setCommentRe, \"\").trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {string|null} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isDoc;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length)\r\n                    throw illegal(\"comment\");\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    isDoc = charAt(start = offset + 1) === \"/\";\r\n                    while (charAt(++offset) !== \"\\n\")\r\n                        if (offset === length)\r\n                            return null;\r\n                    ++offset;\r\n                    if (isDoc) /// Comment\r\n                        setComment(start, offset - 1);\r\n                    ++line;\r\n                    repeat = true;\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    isDoc = charAt(start = offset + 1) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\")\r\n                            ++line;\r\n                        if (++offset === length)\r\n                            throw illegal(\"comment\");\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isDoc) /** Comment */\r\n                        setComment(start, offset - 2);\r\n                    repeat = true;\r\n                } else\r\n                    return \"/\";\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {string|null} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a comment.\r\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\r\n     * @returns {string|null} Comment text\r\n     * @inner\r\n     */\r\n    function cmnt(trailingLine) {\r\n        var ret = null;\r\n        if (trailingLine === undefined) {\r\n            if (commentLine === line - 1 && (commentType === \"*\" || commentLineEmpty))\r\n                ret = commentText;\r\n        } else {\r\n            /* istanbul ignore else */\r\n            if (commentLine < trailingLine)\r\n                peek();\r\n            if (commentLine === trailingLine && !commentLineEmpty && commentType === \"/\")\r\n                ret = commentText;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    return Object.defineProperty({\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        cmnt: cmnt\r\n    }, \"line\", {\r\n        get: function() { return line; }\r\n    });\r\n    /* eslint-enable callback-return */\r\n}\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(25),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    Service   = require(33),\r\n    Message   = require(21),\r\n    Reader    = require(27),\r\n    Writer    = require(42),\r\n    util      = require(37),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(40),\r\n    converter = require(12),\r\n    wrappers  = require(41);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {Object.<number,Field>|null}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {Field[]|null}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {OneOf[]|null}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"p\"], mtype.name);\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\r\n        if ((field = mtype._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON() {\r\n    var inherited = Namespace.prototype.toJSON.call(this);\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; })) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)({\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this)({\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(37);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(39);\r\n\r\nvar roots = require(30);\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (object) {\r\n        var keys  = Object.keys(object),\r\n            array = new Array(keys.length),\r\n            index = 0;\r\n        while (index < keys.length)\r\n            array[index] = object[keys[index++]];\r\n        return array;\r\n    }\r\n    return [];\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {},\r\n        index  = 0;\r\n    while (index < array.length) {\r\n        var key = array[index++],\r\n            val = array[index++];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nutil.isReserved = function isReserved(name) {\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\r\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n    return \".\" + prop;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(35);\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(15);\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(29))());\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// float handling accross browsers\r\nutil.float = require(6);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(7);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(10);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(9);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(38);\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(global.process && global.process.versions && global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ global.dcodeIO && /* istanbul ignore next */ global.dcodeIO.Long || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(37);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else {\r\n            gen\r\n            (\"{\")\r\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\r\n                (\"if(e)\")\r\n                    (\"return%j+e\", field.name + \".\")\r\n            (\"}\");\r\n        }\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(21);\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type) {\r\n                // type_url does not accept leading \".\"\r\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\r\n                    object[\"@type\"].substr(1) : object[\"@type\"];\r\n                // type_url prefix is optional, but path seperator is required\r\n                return this.create({\r\n                    type_url: \"/\" + type_url,\r\n                    value: type.encode(type.fromObject(object)).finish()\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            // Only use fully qualified type name after the last '/'\r\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(39);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(42);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(39);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}